require_relative "../bar_symbol"

module MilleFeuille
  module Code128
    class BarSymbol
      NUMBER_PATTERNS = [
        [1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0], # 0
        [1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0], # 1
        [1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0], # 2
        [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0], # 3
        [1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0], # 4
        [1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0], # 5
        [1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0], # 6
        [1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0], # 7
        [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0], # 8
        [1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0], # 9
        [1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0], # 10
        [1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0], # 11
        [1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0], # 12
        [1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0], # 13
        [1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0], # 14
        [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], # 15
        [1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0], # 16
        [1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0], # 17
        [1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0], # 18
        [1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0], # 19
        [1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0], # 20
        [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0], # 21
        [1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0], # 22
        [1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0], # 23
        [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0], # 24
        [1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0], # 25
        [1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0], # 26
        [1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0], # 27
        [1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0], # 28
        [1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0], # 29
        [1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0], # 30
        [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0], # 31
        [1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], # 32
        [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], # 33
        [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0], # 34
        [1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0], # 35
        [1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0], # 36
        [1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0], # 37
        [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0], # 38
        [1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0], # 39
        [1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0], # 40
        [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0], # 41
        [1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], # 42
        [1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0], # 43
        [1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0], # 44
        [1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0], # 45
        [1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], # 46
        [1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0], # 47
        [1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0], # 48
        [1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0], # 49
        [1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0], # 50
        [1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0], # 51
        [1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0], # 52
        [1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0], # 53
        [1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0], # 54
        [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0], # 55
        [1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], # 56
        [1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], # 57
        [1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0], # 58
        [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0], # 59
        [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0], # 60
        [1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0], # 61
        [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0], # 62
        [1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0], # 63
        [1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], # 64
        [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0], # 65
        [1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], # 66
        [1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0], # 67
        [1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0], # 68
        [1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0], # 69
        [1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0], # 70
        [1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0], # 71
        [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], # 72
        [1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0], # 73
        [1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0], # 74
        [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], # 75
        [1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0], # 76
        [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], # 77
        [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0], # 78
        [1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0], # 79
        [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0], # 80
        [1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0], # 81
        [1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0], # 82
        [1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0], # 83
        [1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0], # 84
        [1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0], # 85
        [1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0], # 86
        [1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0], # 87
        [1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0], # 88
        [1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0], # 89
        [1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0], # 90
        [1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0], # 91
        [1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0], # 92
        [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0], # 93
        [1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], # 94
        [1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0], # 95
        [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0], # 96
        [1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0], # 97
        [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0], # 98
        [1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], # 99
        [1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0], # 100
        [1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0], # 101
        [1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0], # 102 FNC 1
        [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0], # 103 START (CODE A)
        [1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0], # 104 START (CODE B)
        [1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0], # 105 START (CODE C)
      ]

      STOP_PATTERN = [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1]
      QUIET_PATTERN = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

      # @param pattern [Array<Integer>] Character numbers (without the check character and the STOP character)
      def initialize(pattern)
        @pattern = pattern

        if @pattern.any? { |n| !n.between?(0, 105) }
          raise RuntimeError.new("Character number must be 0-105")
        end
      end

      # @param height [Integer]
      # @return [String]
      def svg(height:)
        pattern = [
          QUIET_PATTERN,
          @pattern.map { |n| NUMBER_PATTERNS[n] },
          NUMBER_PATTERNS[check_number],
          STOP_PATTERN,
          QUIET_PATTERN,
        ].flatten

        MilleFeuille::BarSymbol.new(pattern).svg(height: height)
      end

      private

      # @return [Integer] Modulus 103 checksum
      def check_number
        sum = @pattern[0] * 1 + @pattern[1..-1].map.with_index(1) { |pattern_number, idx| pattern_number * idx }.sum
        sum % 103
      end
    end
  end
end
